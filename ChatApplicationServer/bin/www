#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatapplicationserver:server');
var http = require('http');
const socketio = require('socket.io');
const cors = require('cors');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(app.get('port'), () => {
  console.log('Server listening on port', app.get('port'));
});
server.on('error', onError);
server.on('listening', onListening);

// functions to update chat
let usersChat = [];
const addUserChat = (userId, socketId) => {
  !usersChat.some((user) => user.userId === userId) && usersChat.push({ userId, socketId });
};
const removeUserChat = (socketId) => {
  usersChat = usersChat.filter((user) => user.socketId !== socketId);
};
const getUserChat = (userId) => {
  return usersChat.find((user) => user.userId === userId);
};

// function to update friendList
let friendList = []
const addFriend = (userId, socketId) => {
  !friendList.some((friend) => friend.userId === userId) && friendList.push({ userId, socketId });
};
const removeFriend = (socketId) => {
  friendList = friendList.filter((friend) => friend.socketId != socketId);
};
const getFriend = (userId, socketId) => {
  return friendList.find((friend) => friend, userId === userId);
}

// socket server code
var io = socketio(server, {
  cors: {
    origin: "http://localhost:3001",
    credentials: true,
  }
})

io.on("connection", (socket) => {
  console.log("a user connected.");

  //take userId and socketId from user
  socket.on("addUser", (userId) => {
    addUserChat(userId, socket.id);
    io.emit("getUsersChat", usersChat);
  });

  //send and get message
  socket.on("sendMessage", ({ senderId, receiverId }) => {
    const user = getUserChat(receiverId);
    console.log(usersChat);
    console.log(receiverId);
    if (user) {
      io.to(user.socketId).emit("getMessage", {
        senderId,
      });
    }
  });

  socket.on("addFriend", (userId) => {
    addFriend(userId, socket.id);
    io.emit("getFriends", friendList);
    console.log('friend')
    console.log(friendList);
  });

  socket.on("newFriend", ({ senderId, receiverId }) => {
    const friend = getFriend(receiverId);
    console.log(friendList);
    console.log(friend);
    if (friend) {
      io.to(friend.socketId).emit("newFriendAdded", {
        senderId,
      });
    }
  });

  //when disconnect
  socket.on("disconnect", () => {
    console.log("a user disconnected!");
    removeUserChat(socket.id);
    removeFriend(socket.id);
    io.emit("getUsersChat", usersChat);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
